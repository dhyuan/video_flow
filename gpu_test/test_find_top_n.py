from top_n_algorithm import cpu_find_most_probability_top_n_from_block_result, find_top_n
import numpy as np

input_data = np.array([[1.6432382e-01, 1.9431000e+04],
                       [1.6432382e-01, 1.9431000e+04],
                       [1.1198188e-01, 1.9846000e+04],
                       [1.1198188e-01, 1.9846000e+04],
                       [8.5694790e-02, 2.0249000e+04],
                       [8.5694790e-02, 2.0249000e+04],
                       [4.3084383e-02, 2.0708000e+04],
                       [4.3084383e-02, 2.0708000e+04],
                       [1.4695393e-01, 1.9629000e+04],
                       [1.4695393e-01, 1.9629000e+04],
                       [4.6656404e-02, 1.6182000e+04],
                       [4.6656404e-02, 1.6182000e+04],
                       [8.1173554e-02, 3.2920000e+03],
                       [8.1173554e-02, 3.2920000e+03],
                       [9.9982634e-02, 1.6072000e+04],
                       [9.9982634e-02, 1.6072000e+04],
                       [8.5694790e-02, 2.0249000e+04],
                       [8.5694790e-02, 2.0249000e+04],
                       [6.1475929e-02, 1.6832000e+04],
                       [5.4513268e-02, 1.6837000e+04],
                       [6.2300500e-02, 5.1690000e+03],
                       [5.2845374e-02, 5.1720000e+03],
                       [7.4571222e-02, 2.0364000e+04],
                       [7.4571222e-02, 2.0364000e+04],
                       [5.1288038e-02, 1.6288000e+04],
                       [5.1288038e-02, 1.6288000e+04],
                       [1.4695393e-01, 1.9629000e+04],
                       [1.4695393e-01, 1.9629000e+04],
                       [9.4744876e-02, 1.9811000e+04],
                       [9.4744876e-02, 1.9811000e+04],
                       [3.0481264e-01, 3.6472000e+04],
                       [3.0481264e-01, 3.6472000e+04],
                       [2.1659237e-01, 3.7361000e+04],
                       [2.1659237e-01, 3.7361000e+04],
                       [2.6221350e-01, 3.6752000e+04],
                       [2.6221350e-01, 3.6752000e+04],
                       [2.3470353e-01, 3.7303000e+04],
                       [2.3470353e-01, 3.7303000e+04],
                       [2.1014008e-01, 3.6578000e+04],
                       [2.1014008e-01, 3.6578000e+04],
                       [2.7560690e-01, 3.3429000e+04],
                       [2.7560690e-01, 3.3429000e+04],
                       [2.6589042e-01, 3.7509000e+04],
                       [2.6589042e-01, 3.7509000e+04],
                       [2.3975097e-01, 3.7629000e+04],
                       [2.3975097e-01, 3.7629000e+04],
                       [1.8649532e-01, 3.7100000e+04],
                       [1.8649532e-01, 3.7100000e+04],
                       [3.3716071e-01, 3.4575000e+04],
                       [3.3716071e-01, 3.4575000e+04],
                       [4.1396725e-01, 3.5406000e+04],
                       [4.1396725e-01, 3.5406000e+04],
                       [2.1659237e-01, 3.7361000e+04],
                       [2.1659237e-01, 3.7361000e+04],
                       [2.8593597e-01, 3.7475000e+04],
                       [2.8593597e-01, 3.7475000e+04],
                       [1.5923640e-01, 1.3330000e+04],
                       [1.5923640e-01, 1.3330000e+04],
                       [1.1917467e-01, 1.5186000e+04],
                       [1.0932163e-01, 1.5184000e+04],
                       [3.1558487e-01, 3.5923000e+04],
                       [3.1558487e-01, 3.5923000e+04],
                       [3.3859330e-01, 3.4526000e+04],
                       [3.3859330e-01, 3.4526000e+04],
                       [7.8227669e-02, 1.6629000e+04],
                       [7.5666435e-02, 1.6574000e+04],
                       [3.3804789e-01, 3.3106000e+04],
                       [3.3804789e-01, 3.3106000e+04],
                       [2.8872260e-01, 2.9411000e+04],
                       [2.8872260e-01, 2.9411000e+04],
                       [2.5137916e-01, 3.0663000e+04],
                       [2.5137916e-01, 3.0663000e+04],
                       [7.3680662e-02, 3.2896000e+04],
                       [6.9291994e-02, 3.2897000e+04],
                       [1.0609684e-01, 1.4857000e+04],
                       [1.0609684e-01, 1.4857000e+04],
                       [6.2705867e-02, 1.9934000e+04],
                       [6.0360957e-02, 1.9933000e+04],
                       [1.7385405e-01, 2.0062000e+04],
                       [1.5291518e-01, 2.0061000e+04],
                       [2.4097958e-01, 3.0171000e+04],
                       [2.4097958e-01, 3.0171000e+04],
                       [2.3382027e-01, 3.5325000e+04],
                       [2.3382027e-01, 3.5325000e+04],
                       [1.2076222e-01, 2.1881000e+04],
                       [1.1745447e-01, 2.1869000e+04],
                       [9.5709778e-02, 2.2414000e+04],
                       [9.1317847e-02, 2.2111000e+04],
                       [2.2234298e-01, 3.6376000e+04],
                       [2.2234298e-01, 3.6376000e+04],
                       [2.3975097e-01, 3.7629000e+04],
                       [2.3975097e-01, 3.7629000e+04],
                       [3.5933563e-01, 3.4712000e+04],
                       [3.5933563e-01, 3.4712000e+04],
                       [2.6221350e-01, 3.6752000e+04],
                       [2.6221350e-01, 3.6752000e+04],
                       [3.3319038e-01, 3.5390000e+04],
                       [3.3319038e-01, 3.5390000e+04],
                       [2.1014008e-01, 3.6578000e+04],
                       [2.1014008e-01, 3.6578000e+04],
                       [3.4950686e-01, 2.3930000e+04],
                       [3.4950686e-01, 2.3930000e+04],
                       [2.2234298e-01, 3.6376000e+04],
                       [2.2234298e-01, 3.6376000e+04]], np.float32)


def test_md():
    r = find_top_n(input_data, 3)
    print(r)


def test_find_top_n():
    input_array = np.array([
        [0.18, 180],
        [0.013, 100],
        [0.012, 100],
        [0.193, 193],
        [0.192, 192],
        [0.191, 191],
        [0.19, 190],
        [0.17, 170],
        [0.16, 160],
        [0.15, 150],
        [0.14, 140],
        [0.13, 130],
        [0.12, 120],
        [0.131, 120],
        [0.011, 100]
    ])
    find_top_n(input_array, 5)
    assert input_array[0][0] == 0.193
    assert input_array[0][1] == 193
    assert input_array[1][0] == 0.192
    assert input_array[1][1] == 192
    assert input_array[2][0] == 0.191
    assert input_array[2][1] == 191
    assert input_array[3][0] == 0.19
    assert input_array[3][1] == 190
    assert input_array[4][0] == 0.18
    assert input_array[4][1] == 180
    print(input_array)


def test_top_n_from_desc_array():
    input_array = np.array([
        [0.193, 193],
        [0.192, 192],
        [0.191, 191],
        [0.19, 190],
        [0.18, 180],
        [0.17, 170],
        [0.16, 160],
        [0.15, 150],
        [0.14, 140],
        [0.13, 130],
        [0.12, 120],
        [0.131, 120],
        [0.013, 100],
        [0.012, 100],
        [0.011, 100]
    ])
    top_n_data = cpu_find_most_probability_top_n_from_block_result(input_array, 10)
    assert top_n_data[0][0] == np.float32(0.193)
    assert top_n_data[1][0] == np.float32(0.192)
    assert top_n_data[2][0] == np.float32(0.191)
    assert top_n_data[3][0] == np.float32(0.19)
    assert top_n_data[4][0] == np.float32(0.18)


def test_top_n_from_acc_array():
    input_array = np.array([
        [0.01, 100],
        [0.1, 120],
        [0.12, 120],
        [0.13, 130],
        [0.14, 140],
        [0.15, 150],
        [0.16, 160],
        [0.17, 170],
        [0.18, 180],
        [0.19, 190],
        [0.191, 191],
        [0.192, 192],
        [0.193, 193]
    ])
    top_n_data = cpu_find_most_probability_top_n_from_block_result(input_array, 5)
    # assert top_n_data[0] == 0.193
    # assert top_n_data[1] == 0.192
    # assert top_n_data[2] == 0.191
    # assert top_n_data[3] == 0.19
    # assert top_n_data[4] == 0.18
